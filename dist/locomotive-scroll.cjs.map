{"version":3,"file":"locomotive-scroll.cjs","sources":["../src/core/IO.ts","../src/utils/maths.ts","../src/core/ScrollElement.ts","../src/core/Core.ts","../src/core/RO.ts","../src/index.ts"],"sourcesContent":["/**\n * Intersection Observer\n *\n * Detecting visibility of an element in the viewport.\n *\n * Features functions to:\n *\n * - Trigger inview/outOfView callbacks\n * - If the element has a requestAnimationFrame dependency, set interactivy status for the ScrollElement Class\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Intersection_Observer_API}\n */\n\nimport { IIOOptions } from '../types';\nimport ScrollElement from './ScrollElement';\n\nexport default class IO {\n    public scrollElements: ScrollElement[];\n    private rootMargin: string;\n    private IORaf: boolean;\n    private observer!: IntersectionObserver;\n\n    constructor({\n        scrollElements,\n        rootMargin = '-1px -1px -1px -1px',\n        IORaf,\n    }: IIOOptions) {\n        // Parameters\n        this.scrollElements = scrollElements;\n        this.rootMargin = rootMargin;\n        this.IORaf = IORaf;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Intersection Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Options\n        const observerOptions = {\n            rootMargin: this.rootMargin,\n        };\n\n        // Callback\n        const onIntersect = (entries: IntersectionObserverEntry[]) => {\n            entries.forEach((entry) => {\n                const $targetItem: ScrollElement | undefined =\n                    this.scrollElements.find(\n                        (item) => item.$el === entry.target\n                    );\n\n                if (entry.isIntersecting) {\n                    $targetItem && ($targetItem.isAlreadyIntersected = true);\n                    this._setInview(entry);\n                } else if ($targetItem && $targetItem.isAlreadyIntersected) {\n                    this._setOutOfView(entry);\n                }\n            });\n        };\n\n        // Instance\n        this.observer = new IntersectionObserver(onIntersect, observerOptions);\n\n        // Observe each default elements\n        for (const scrollElement of this.scrollElements) {\n            const $scrollElement = scrollElement.$el;\n            this.observe($scrollElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Intersection Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n\n    /**\n     * Subscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to observe.\n     */\n    public observe($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.observe($scrollElement);\n    }\n\n    /**\n     * Unsubscribe element to the Intersection Observer.\n     *\n     * @param {HTMLElement} $scrollElement - DOM Element to unobserve.\n     */\n    public unobserve($scrollElement: HTMLElement) {\n        if (!$scrollElement) {\n            return;\n        }\n\n        this.observer.unobserve($scrollElement);\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger inview callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setInview(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOn();\n        !this.IORaf && scrollElement?.setInview();\n    }\n\n    /**\n     * Find ScrollElementReference instance and trigger out of view callbacks.\n     *\n     * @private\n     *\n     * @param {IntersectionObserverEntry} entry - DOM Element to observe.\n     */\n    private _setOutOfView(entry: IntersectionObserverEntry) {\n        const scrollElement = this.scrollElements.find(\n            (scrollElement) => scrollElement.$el === entry.target\n        );\n\n        this.IORaf && scrollElement?.setInteractivityOff();\n        !this.IORaf && scrollElement?.setOutOfView();\n\n        // Unobserve if element doesn't have repeat attribute\n        if (!scrollElement?.attributes.scrollRepeat && !this.IORaf) {\n            this.unobserve(entry.target as HTMLElement);\n        }\n    }\n}\n","// https://greensock.com/docs/v3/GSAP/gsap.utils\n\n/**\n * Clamp a value to fit within a specific range (ex: clamp(0, 100, -12) --> 0).\n *\n * @param {number} min   - Minimum value expected.\n * @param {number} max   - Maximum value expected.\n * @param {number} value - Current value.\n *\n * @returns {number} - Clamped value.\n */\nexport function clamp(min: number, max: number, value: number): number {\n    return value < min ? min : value > max ? max : value;\n}\n\n/**\n * Map one range to another (ex: mapRange(-10, 10, 0, 100, 5) --> 75).\n *\n * @param {number} inMin  - Current minimum value.\n * @param {number} inMax  - Current maximum value.\n * @param {number} outMin - Maximum value expected.\n * @param {number} outMax - Maximum value expected.\n * @param {number} value  - Current value.\n *\n * @returns {number} - New value that should be between minimum value expected and maximum value.\n */\nexport function mapRange(\n    inMin: number,\n    inMax: number,\n    outMin: number,\n    outMax: number,\n    value: number\n): number {\n    const inRange = inMax - inMin;\n    const outRange = outMax - outMin;\n    return outMin + (((value - inMin) / inRange) * outRange || 0);\n}\n\n/**\n * Map a number within a range to a progress between 0 to 1 (ex: normalize(100, 200, 150) --> 0.5).\n *\n * @param {number} min   - Current minimum value.\n * @param {number} max   - Current maximum value.\n * @param {number} value - Current value.\n *\n * @returns {number} - New value that should be between 0 and 1.\n */\nexport function normalize(min: number, max: number, value: number): number {\n    return mapRange(min, max, 0, 1, value);\n}\n\n/**\n * Get closest number from an array.\n *\n * @param {number[]} array  - Numbers array.\n * @param {number}   target - Reference value.\n *\n * @returns {number} - Closest number.\n */\nexport function closestNumber(array: number[], target: number): number {\n    return array.reduce((prev, curr) => {\n        return Math.abs(curr - target) < Math.abs(prev - target) ? curr : prev;\n    });\n}\n","/**\n * Scroll Element\n *\n * Give tools to compute element progress in the viewport and triggers callbacks to animate it.\n *\n * Features functions to:\n *\n * - scrollClass - Add a custom class when the element is intersected by the offset\n * - scrollOffset - Determine offsets to intersect the element\n * - scrollPosition - Determine the element positions to consider an element as intersected.\n * - scrollModuleProgress - Send scroll progress to modular module that have a specific method (PROGRESS_MODULAR_METHOD)\n * - scrollCssProgress - Add a specific css variable (PROGRESS_CSS_VAR) that store the scroll progress\n * - scrollEventProgress - Send scroll progress to custom event listeners.\n * - scrollSpeed - Add a scroll multiplicator to create a parallax effect\n * - scrollRepeat - Repeat the option to trigger animation each time the element is intersected\n * - scrollCall - Call a custom event or a modular callback when the element is intersected\n */\n\nimport {\n    IModular,\n    IScrollElementOptions,\n    IScrollElementAttributes,\n    IScrollElementIntersection,\n    IScrollElementMetrics,\n    IProgressModularModules,\n    IScrollElementCallbacksValues,\n    scrollCallWay,\n    scrollCallFrom,\n    scrollOrientation,\n} from '../types';\nimport { clamp, closestNumber, normalize, mapRange } from '../utils/maths';\n\n/** Constants */\nconst INVIEW_CLASS = 'is-inview';\nconst PROGRESS_CSS_VAR = '--progress';\nconst PROGRESS_MODULAR_METHOD = 'onScrollProgress';\n\nexport default class ScrollElement {\n    public $el: HTMLElement;\n    public id: number;\n    public needRaf: boolean;\n    public attributes: IScrollElementAttributes;\n    public scrollOrientation: scrollOrientation;\n    public isAlreadyIntersected: boolean;\n\n    private intersection: IScrollElementIntersection;\n    private metrics: IScrollElementMetrics;\n    private currentScroll: number;\n    private translateValue: number;\n    private progress: number;\n    private lastProgress: number | null;\n    private modularInstance?: IModular;\n    private progressModularModules: IProgressModularModules[];\n    private isInview: boolean;\n    private isInteractive: boolean;\n    private isInFold: boolean;\n    private isFirstResize: boolean;\n\n    private subscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n    private unsubscribeElementUpdateFn: (scrollElement: ScrollElement) => void;\n\n    constructor({\n        $el,\n        id,\n        modularInstance,\n        subscribeElementUpdateFn,\n        unsubscribeElementUpdateFn,\n        needRaf,\n        scrollOrientation,\n    }: IScrollElementOptions) {\n        // Scroll DOM element\n        this.$el = $el;\n        // Unique ID\n        this.id = id;\n        // RAF option\n        this.needRaf = needRaf;\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n        // Modular.js\n        this.modularInstance = modularInstance;\n        // Parent's callbacks\n        this.subscribeElementUpdateFn = subscribeElementUpdateFn;\n        this.unsubscribeElementUpdateFn = unsubscribeElementUpdateFn;\n\n        // Attributes\n        this.attributes = {\n            scrollClass: this.$el.dataset['scrollClass'] ?? INVIEW_CLASS,\n            scrollOffset: this.$el.dataset['scrollOffset'] ?? '0,0',\n            scrollPosition: this.$el.dataset['scrollPosition'] ?? 'start,end',\n            scrollModuleProgress:\n                this.$el.dataset['scrollModuleProgress'] != null,\n            scrollCssProgress: this.$el.dataset['scrollCssProgress'] != null,\n            scrollEventProgress:\n                this.$el.dataset['scrollEventProgress'] ?? null,\n            scrollSpeed:\n                this.$el.dataset['scrollSpeed'] != null\n                    ? parseFloat(this.$el.dataset['scrollSpeed'])\n                    : null,\n            scrollRepeat: this.$el.dataset['scrollRepeat'] != null,\n            scrollCall: this.$el.dataset['scrollCall'] ?? null,\n            scrollCallSelf: this.$el.dataset['scrollCallSelf'] != null,\n            scrollIgnoreFold: this.$el.dataset['scrollIgnoreFold'] != null,\n            scrollEnableTouchSpeed:\n                this.$el.dataset['scrollEnableTouchSpeed'] != null,\n        };\n\n        // Limits\n        this.intersection = {\n            start: 0,\n            end: 0,\n        };\n\n        // Metrics\n        this.metrics = {\n            offsetStart: 0,\n            offsetEnd: 0,\n            bcr: {} as DOMRect,\n        };\n\n        // Scroll Values\n        this.currentScroll =\n            this.scrollOrientation === 'vertical'\n                ? window.scrollY\n                : window.scrollX;\n\n        // Parallax\n        this.translateValue = 0;\n\n        // Progress\n        this.progress = 0;\n        this.lastProgress = null;\n        this.progressModularModules = [];\n\n        // Inview\n        this.isInview = false;\n        this.isInteractive = false;\n        this.isAlreadyIntersected = false;\n        this.isInFold = false;\n        this.isFirstResize = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize progress tracking.\n     *\n     * @private\n     */\n    private _init() {\n        if (!this.needRaf) {\n            return;\n        }\n\n        // Prepare modules progress\n        if (this.modularInstance && this.attributes.scrollModuleProgress) {\n            this._getProgressModularModules();\n        }\n\n        // First resize to compute all values\n        this._resize();\n    }\n\n    /**\n     * Callback - Resize callback\n     */\n    public onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        this.currentScroll = currentScroll;\n        this._resize();\n    }\n\n    /**\n     * Callback - RAF callback\n     */\n    public onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        this.currentScroll = currentScroll;\n        this._computeProgress();\n\n        // Parallax\n        if (\n            this.attributes.scrollSpeed &&\n            !isNaN(this.attributes.scrollSpeed)\n        ) {\n            // if touch detected or smooth disabled\n            if (!this.attributes.scrollEnableTouchSpeed && !smooth) {\n                if (this.translateValue) {\n                    this.$el.style.transform = `translate3d(0, 0, 0)`;\n                }\n                this.translateValue = 0;\n\n                // if mousewheel or smooth enabled\n            } else {\n                // Check fold condition\n                if (this.isInFold) {\n                    const progress = Math.max(0, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                } else {\n                    const progress = mapRange(0, 1, -1, 1, this.progress);\n                    this.translateValue =\n                        progress * wSize * this.attributes.scrollSpeed * -1;\n                }\n\n                this.$el.style.transform =\n                    this.scrollOrientation === 'vertical'\n                        ? `translate3d(0, ${this.translateValue}px, 0)`\n                        : `translate3d(${this.translateValue}px, 0, 0)`;\n            }\n        }\n    }\n\n    /**\n     * Inview callback\n     */\n    public setInview() {\n        if (this.isInview) {\n            return;\n        }\n\n        this.isInview = true;\n        this.$el.classList.add(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'enter';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Out of view callback\n     */\n    public setOutOfView() {\n        if (!(this.isInview && this.attributes.scrollRepeat)) {\n            return;\n        }\n\n        this.isInview = false;\n        this.$el.classList.remove(this.attributes.scrollClass);\n\n        const way: scrollCallWay = 'leave';\n        const from: scrollCallFrom = this._getScrollCallFrom();\n        this.attributes.scrollCall && this._dispatchCall(way, from);\n    }\n\n    /**\n     * Switch interactivity on to subscribe the instance to the RAF\n     * and start calculations.\n     */\n    public setInteractivityOn() {\n        if (this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = true;\n        this.subscribeElementUpdateFn(this);\n    }\n\n    /**\n     * Switch interactivity off to unsubscribe the instance to the RAF\n     * and stop calculations.\n     */\n    public setInteractivityOff() {\n        if (!this.isInteractive) {\n            return;\n        }\n\n        this.isInteractive = false;\n        this.unsubscribeElementUpdateFn(this);\n\n        // Force progress to progress limit when the element is out\n        this.lastProgress != null &&\n            this._computeProgress(closestNumber([0, 1], this.lastProgress));\n    }\n\n    /**\n     * Resize method that compute the element's values.\n     *\n     * @private\n     */\n    private _resize() {\n        this.metrics.bcr = this.$el.getBoundingClientRect();\n        this._computeMetrics();\n        this._computeIntersection();\n\n        // First resize logic\n        if (this.isFirstResize) {\n            this.isFirstResize = false;\n            // Dispatch default call if the element is in fold.\n            if (this.isInFold) {\n                this.setInview();\n            }\n        }\n    }\n\n    /**\n     * Compute element's offsets and determine if the element is in fold.\n     *\n     * @private\n     */\n    private _computeMetrics() {\n        const { top, left, height, width } = this.metrics.bcr;\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n        const metricsStart = this.scrollOrientation === 'vertical' ? top : left;\n        const metricsSize =\n            this.scrollOrientation === 'vertical' ? height : width;\n\n        this.metrics.offsetStart =\n            this.currentScroll + metricsStart - this.translateValue;\n        this.metrics.offsetEnd = this.metrics.offsetStart + metricsSize;\n\n        if (\n            this.metrics.offsetStart < wSize &&\n            !this.attributes.scrollIgnoreFold\n        ) {\n            this.isInFold = true;\n        } else {\n            this.isInFold = false;\n        }\n    }\n\n    /**\n     * Compute intersection values depending on the context.\n     *\n     * @private\n     */\n    private _computeIntersection() {\n        // Window size\n        const wSize =\n            this.scrollOrientation === 'vertical'\n                ? window.innerHeight\n                : window.innerWidth;\n\n        // Metrics size\n        const metricsSize =\n            this.scrollOrientation === 'vertical'\n                ? this.metrics.bcr.height\n                : this.metrics.bcr.width;\n\n        // Offset\n        const offset = this.attributes.scrollOffset.split(',');\n        const offsetStart = offset[0] != undefined ? offset[0].trim() : '0';\n        const offsetEnd = offset[1] != undefined ? offset[1].trim() : '0';\n\n        // Positions\n        const scrollPosition = this.attributes.scrollPosition.split(',');\n        let scrollPositionStart =\n            scrollPosition[0] != undefined ? scrollPosition[0].trim() : 'start';\n        const scrollPositionEnd =\n            scrollPosition[1] != undefined ? scrollPosition[1].trim() : 'end';\n\n        // Viewport\n        const viewportStart = offsetStart.includes('%')\n            ? wSize * parseInt(offsetStart.replace('%', '').trim()) * 0.01\n            : parseInt(offsetStart);\n        const viewportEnd = offsetEnd.includes('%')\n            ? wSize * parseInt(offsetEnd.replace('%', '').trim()) * 0.01\n            : parseInt(offsetEnd);\n\n        // Fold exception\n        if (this.isInFold) {\n            scrollPositionStart = 'fold';\n        }\n\n        // Define Intersection Start\n        switch (scrollPositionStart) {\n            case 'start':\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n\n            case 'middle':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.start =\n                    this.metrics.offsetStart -\n                    wSize +\n                    viewportStart +\n                    metricsSize;\n                break;\n\n            case 'fold':\n                this.intersection.start = 0;\n                break;\n\n            default:\n                this.intersection.start =\n                    this.metrics.offsetStart - wSize + viewportStart;\n                break;\n        }\n\n        // Define Intersection End\n        switch (scrollPositionEnd) {\n            case 'start':\n                this.intersection.end = this.metrics.offsetStart - viewportEnd;\n                break;\n\n            case 'middle':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize * 0.5;\n                break;\n\n            case 'end':\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n\n            default:\n                this.intersection.end =\n                    this.metrics.offsetStart - viewportEnd + metricsSize;\n                break;\n        }\n\n        // Avoid to have the end < the start intersection >\n        if (this.intersection.end <= this.intersection.start) {\n            switch (scrollPositionEnd) {\n                case 'start':\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n\n                case 'middle':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize * 0.5;\n                    break;\n\n                case 'end':\n                    this.intersection.end =\n                        this.intersection.start + metricsSize;\n                    break;\n\n                default:\n                    this.intersection.end = this.intersection.start + 1;\n                    break;\n            }\n        }\n    }\n\n    /**\n     * Compute the scroll progress of the element depending\n     * on its intersection values.\n     *\n     * @private\n     *\n     * @param {number} [forcedProgress] - Value to force progress.\n     */\n    private _computeProgress(forcedProgress?: number) {\n        // Progress\n        const progress =\n            forcedProgress ??\n            clamp(\n                0,\n                1,\n                normalize(\n                    this.intersection.start,\n                    this.intersection.end,\n                    this.currentScroll\n                )\n            );\n\n        this.progress = progress;\n\n        if (progress != this.lastProgress) {\n            this.lastProgress = progress;\n\n            // Set the element's progress to the css variable\n            this.attributes.scrollCssProgress && this._setCssProgress(progress);\n\n            // Set the element's progress to the custom event listeners\n            this.attributes.scrollEventProgress &&\n                this._setCustomEventProgress(progress);\n\n            // Set the element's progress to inline modules\n            if (this.attributes.scrollModuleProgress) {\n                for (const modularModules of this.progressModularModules) {\n                    this.modularInstance &&\n                        this.modularInstance.call(\n                            PROGRESS_MODULAR_METHOD,\n                            progress,\n                            modularModules.moduleName,\n                            modularModules.moduleId\n                        );\n                }\n            }\n\n            // Logic to trigger the inview/out of view callbacks\n            progress > 0 && progress < 1 && this.setInview();\n            progress === 0 && this.setOutOfView();\n            progress === 1 && this.setOutOfView();\n        }\n    }\n\n    /**\n     * Set the element's progress to a specific css variable.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCssProgress(currentProgress = 0) {\n        this.$el.style.setProperty(\n            PROGRESS_CSS_VAR,\n            currentProgress.toString()\n        );\n    }\n\n    /**\n     * Set the element's progress to the custom event listeners.\n     *\n     * @private\n     *\n     * @param {number} [currentProgress] - Progress value.\n     */\n    _setCustomEventProgress(currentProgress = 0) {\n        const customEventName = this.attributes.scrollEventProgress;\n\n        if (!customEventName) return;\n\n        const customEvent = new CustomEvent(customEventName, {\n            detail: {\n                target: this.$el,\n                progress: currentProgress,\n            },\n        });\n        window.dispatchEvent(customEvent);\n    }\n\n    /**\n     * Get modular modules that can listen the element's progress.\n     *\n     * @private\n     */\n    _getProgressModularModules() {\n        if (!this.modularInstance) {\n            return;\n        }\n\n        const modulesIdNames = Object.keys(this.$el.dataset).filter((key) =>\n            key.includes('module')\n        );\n        const modules: any[] = Object.entries(this.modularInstance.modules);\n\n        if (!modulesIdNames.length) {\n            return;\n        }\n\n        for (const modulesIdName of modulesIdNames) {\n            const moduleId = this.$el.dataset[modulesIdName];\n\n            if (!moduleId) {\n                return;\n            }\n\n            for (const module of modules) {\n                const [moduleName, moduleObj] = module;\n\n                if (moduleId in moduleObj) {\n                    this.progressModularModules.push({\n                        moduleName,\n                        moduleId,\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Function to get scroll call from.\n     *\n     * @private\n     */\n    _getScrollCallFrom(): scrollCallFrom {\n        const closestIntersectionValue = closestNumber(\n            [this.intersection.start, this.intersection.end],\n            this.currentScroll\n        );\n        return this.intersection.start === closestIntersectionValue\n            ? 'start'\n            : 'end';\n    }\n\n    /**\n     * Function to dispatch a custom event or call a modular callback.\n     *\n     * @private\n     *\n     * @param {scrollCallWay} way - Enter or leave.\n     * @param {scrollCallFrom} from - Start or end.\n     */\n    _dispatchCall(way: scrollCallWay, from: scrollCallFrom) {\n        const callParameters = this.attributes.scrollCall?.split(',');\n        const callSelf = this.attributes?.scrollCallSelf;\n\n        if (callParameters && callParameters.length > 1) {\n            // Using Modular.js (https://github.com/modularorg/modularjs)\n            const [func, moduleName, moduleId] = callParameters;\n            let targetModuleId;\n\n            // If the module is set on the scroll element\n            if (callSelf) {\n                targetModuleId = this.$el.dataset[`module${moduleName.trim()}`];\n            } else {\n                targetModuleId = moduleId;\n            }\n\n            this.modularInstance &&\n                this.modularInstance.call(\n                    func.trim(),\n                    {\n                        target: this.$el,\n                        way,\n                        from,\n                    },\n                    moduleName.trim(),\n                    targetModuleId?.trim()\n                );\n        } else if (callParameters) {\n            // Using CustomEvent API (https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent)\n            const [customEventName] = callParameters;\n            const customEvent = new CustomEvent(customEventName, {\n                detail: {\n                    target: this.$el,\n                    way,\n                    from,\n                },\n            });\n            window.dispatchEvent(customEvent);\n        }\n    }\n}\n","/**\n * Integrates Lenis with Locomotive's built-in animation system\n */\n\nimport {\n    CoreOptions,\n    IModular,\n    IScrollElementCallbacksValues,\n    scrollOrientation,\n} from '../types';\nimport IO from './IO';\nimport ScrollElement from './ScrollElement';\n\n/** Defined attributes that need a requestAnimationFrame */\nconst ATTRIBUTES_THAT_NEED_RAF = [\n    'scrollOffset',\n    'scrollPosition',\n    'scrollModuleProgress',\n    'scrollCssProgress',\n    'scrollEventProgress',\n    'scrollSpeed',\n];\n\n/** Default root margins */\nconst TRIGGER_ROOT_MARGIN = '-1px -1px -1px -1px';\nconst RAF_ROOT_MARGIN = '100% 100% 100% 100%'; // Add 100vh top/bottom && 100vw left/right to use a biggest value with data-scroll-speed\n\nexport default class Core {\n    private $scrollContainer!: HTMLElement;\n    private modularInstance?: IModular;\n    private triggerRootMargin!: string;\n    private rafRootMargin!: string;\n    private scrollElements!: ScrollElement[];\n    private triggeredScrollElements!: ScrollElement[];\n    private RAFScrollElements!: ScrollElement[];\n    private scrollElementsToUpdate!: ScrollElement[];\n    private IOTriggerInstance!: IO;\n    private IORafInstance!: IO;\n    private scrollOrientation!: scrollOrientation;\n\n    constructor({\n        $el,\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        scrollOrientation,\n    }: CoreOptions) {\n        if (!$el) {\n            console.error('Please provide a DOM Element as scrollContainer');\n            return;\n        }\n\n        // Scroll container\n        this.$scrollContainer = $el;\n\n        // Modular.js\n        this.modularInstance = modularInstance;\n\n        // Scroll Direction\n        this.scrollOrientation = scrollOrientation;\n\n        // IO Margins\n        this.triggerRootMargin = triggerRootMargin ?? TRIGGER_ROOT_MARGIN;\n        this.rafRootMargin = rafRootMargin ?? RAF_ROOT_MARGIN;\n\n        // ScrollElements arrays\n        this.scrollElements = [];\n        this.triggeredScrollElements = [];\n        this.RAFScrollElements = [];\n        this.scrollElementsToUpdate = [];\n\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize the core.\n     *\n     * @private\n     */\n    private _init() {\n        const $scrollElements =\n            this.$scrollContainer.querySelectorAll('[data-scroll]');\n\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements($scrollElementsArr);\n\n        // Trigger IO\n        this.IOTriggerInstance = new IO({\n            scrollElements: [...this.triggeredScrollElements],\n            rootMargin: this.triggerRootMargin,\n            IORaf: false,\n        });\n\n        // Raf IO\n        this.IORafInstance = new IO({\n            scrollElements: [...this.RAFScrollElements],\n            rootMargin: this.rafRootMargin,\n            IORaf: true,\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy core.\n     */\n    public destroy() {\n        this.IOTriggerInstance.destroy();\n        this.IORafInstance.destroy();\n        this._unsubscribeAllScrollElements();\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    onResize({ currentScroll }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.RAFScrollElements) {\n            scrollElement.onResize({\n                currentScroll,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Callback - RAF callback.\n     */\n    onRender({ currentScroll, smooth }: IScrollElementCallbacksValues) {\n        for (const scrollElement of this.scrollElementsToUpdate) {\n            scrollElement.onRender({\n                currentScroll,\n                smooth,\n            } as IScrollElementCallbacksValues);\n        }\n    }\n\n    /**\n     * Remove items from lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $oldContainer - HTMLElement that contains data-scroll elements to unsubscribe\n     */\n    removeScrollElements($oldContainer: HTMLElement) {\n        const $scrollElementsToRemove =\n            $oldContainer.querySelectorAll('[data-scroll]');\n\n        if (!$scrollElementsToRemove.length) return;\n\n        // 1. Remove from IO\n        for (let index = 0; index < this.triggeredScrollElements.length; index++) {\n            const scrollElement = this.triggeredScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IOTriggerInstance.unobserve(scrollElement.$el);\n                this.triggeredScrollElements.splice(index, 1);\n            }\n        }\n\n        for (let index = 0; index < this.RAFScrollElements.length; index++) {\n            const scrollElement = this.RAFScrollElements[index];\n            const $scrollElementsToRemoveArr = Array.from($scrollElementsToRemove) as HTMLElement []\n            if ($scrollElementsToRemoveArr.indexOf(scrollElement.$el) > -1) {\n                this.IORafInstance.unobserve(scrollElement.$el);\n                this.RAFScrollElements.splice(index, 1);\n            }\n        }\n\n        // 2. Remove from scrollElementsToUpdate[] and scrollElements[]\n        $scrollElementsToRemove.forEach(($scrollElement) => {\n            const targetScrollElementToUpdate =\n                this.scrollElementsToUpdate.find(\n                    (scrollElement) => scrollElement.$el === $scrollElement\n                );\n            const targetScrollElement = this.scrollElements.find(\n                (scrollElement) => scrollElement.$el === $scrollElement\n            );\n\n            if (targetScrollElementToUpdate) {\n                this._unsubscribeElementUpdate(targetScrollElementToUpdate);\n            }\n            if (targetScrollElement) {\n                this.scrollElements = this.scrollElements.filter(\n                    (scrollElementItem) =>\n                        scrollElementItem.id != targetScrollElement.id\n                );\n            }\n        });\n    }\n\n    /**\n     * Add items to lists of scroll elements and compute all new values.\n     *\n     * @param {HTMLElement} $newContainer - HTMLElement that contains data-scroll elements to subscribe\n     */\n    addScrollElements($newContainer: HTMLElement) {\n        // 3. Rebuild ScrollElements\n        const $scrollElements = $newContainer.querySelectorAll('[data-scroll]');\n\n        // 4. Get max scrollElement.id\n        const ids: number[] = [];\n        this.scrollElements.forEach((scrollElement) => {\n            ids.push(scrollElement.id);\n        });\n        const maxID = Math.max(...ids);\n        const fromIndex = maxID + 1;\n        const $scrollElementsArr = Array.from($scrollElements) as HTMLElement[]\n        this._subscribeScrollElements(\n            $scrollElementsArr,\n            fromIndex,\n            true\n        );\n    }\n\n    /**\n     * Create a ScrollElement instance for each elements with\n     * `data-scroll` attribute.\n     *\n     * @private\n     *\n     * @param {HTMLElement[]} $scrollElements - List of elements that need\n     *     to be regarded.\n     */\n    _subscribeScrollElements(\n        $scrollElements: HTMLElement[],\n        fromIndex = 0,\n        toObserve = false\n    ) {\n        // For each scroll element create a ScrollElement instance\n        for (let index = 0; index < $scrollElements.length; index++) {\n            const $scrollElement = $scrollElements[index];\n            const needRaf = this._checkRafNeeded($scrollElement);\n\n            const scrollElementInstance = new ScrollElement({\n                $el: $scrollElement,\n                id: fromIndex + index,\n                scrollOrientation: this.scrollOrientation,\n                modularInstance: this.modularInstance,\n                subscribeElementUpdateFn:\n                    this._subscribeElementUpdate.bind(this),\n                unsubscribeElementUpdateFn:\n                    this._unsubscribeElementUpdate.bind(this),\n                needRaf,\n            });\n\n            // Push to common array\n            this.scrollElements.push(scrollElementInstance);\n\n            // Push to specific array\n            if (needRaf) {\n                this.RAFScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IORafInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IORafInstance.observe(scrollElementInstance.$el);\n                }\n            } else {\n                this.triggeredScrollElements.push(scrollElementInstance);\n\n                // Dynamic observe item\n                if (toObserve) {\n                    this.IOTriggerInstance.scrollElements.push(\n                        scrollElementInstance\n                    );\n                    this.IOTriggerInstance.observe(scrollElementInstance.$el);\n                }\n            }\n        }\n    }\n\n    /**\n     * Clear all ScrollElement arrays.\n     *\n     * @private\n     */\n    _unsubscribeAllScrollElements() {\n        this.scrollElements = [];\n        this.RAFScrollElements = [];\n        this.triggeredScrollElements = [];\n        this.scrollElementsToUpdate = [];\n    }\n\n    /**\n     * Subscribe ScrollElement instance that needs to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - ScrollElement instance inview\n     *     that needs to be updated.\n     */\n    _subscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate.push(scrollElement);\n    }\n\n    /**\n     * Unscribe ScrollElement instance that doesn't need to be updated.\n     *\n     * @private\n     *\n     * @param {ScrollElement} scrollElement - The updated ScrollElement instance\n     *     out of view now.\n     */\n    _unsubscribeElementUpdate(scrollElement: ScrollElement) {\n        this.scrollElementsToUpdate = this.scrollElementsToUpdate.filter(\n            (scrollElementToUpdate) =>\n                scrollElementToUpdate.id != scrollElement.id\n        );\n    }\n\n    /**\n     * Check if a DOM Element need a requestAnimationFrame to be used.\n     *\n     * @private\n     *\n     * @param {HTMLElement} $scrollElement - The element that needs to be checked.\n     *\n     * @returns {boolean}\n     */\n    _checkRafNeeded($scrollElement: HTMLElement) {\n        let attributesThatNeedRaf = [...ATTRIBUTES_THAT_NEED_RAF];\n\n        // Remove utils\n        const removeAttribute = (attributeToRemove: string) => {\n            attributesThatNeedRaf = attributesThatNeedRaf.filter(\n                (attribute) => attribute != attributeToRemove\n            );\n        };\n\n        // 1. Check scroll offset values\n        if ($scrollElement.dataset.scrollOffset) {\n            const value = $scrollElement.dataset.scrollOffset\n                .split(',')\n                .map((test) => test.replace('%', '').trim())\n                .join(',');\n            if (value != '0,0') {\n                return true;\n            } else {\n                removeAttribute('scrollOffset');\n            }\n        } else {\n            removeAttribute('scrollOffset');\n        }\n\n        // 2. Check scroll position values\n        if ($scrollElement.dataset.scrollPosition) {\n            const value = $scrollElement.dataset.scrollPosition.trim();\n            if (value != 'top,bottom') {\n                return true;\n            } else {\n                removeAttribute('scrollPosition');\n            }\n        } else {\n            removeAttribute('scrollPosition');\n        }\n\n        // 3. Check scroll speed values\n        if (\n            $scrollElement.dataset.scrollSpeed &&\n            !isNaN(parseFloat($scrollElement.dataset.scrollSpeed))\n        ) {\n            return true;\n        } else {\n            removeAttribute('scrollSpeed');\n        }\n\n        // 4. Check others attributes\n        for (const attribute of attributesThatNeedRaf) {\n            if (attribute in $scrollElement.dataset) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n}\n","/**\n * Resize Observer\n *\n * The Resize Observer API provides a performant mechanism by which code can monitor an element for changes to its size,\n * with notifications being delivered to the observer each time the size changes.\n *\n * Features functions to:\n *\n * - Trigger the resize callback if the specified element's size change.\n *\n * References:\n *\n * - {@link https://developer.mozilla.org/en-US/docs/Web/API/Resize_Observer_API}\n */\n\nimport { IROOptions } from '../types';\n\nexport default class RO {\n    private $resizeElements: HTMLElement[];\n    private isFirstObserve: boolean;\n    private observer!: ResizeObserver;\n    private resizeCallback: () => void;\n\n    constructor({ resizeElements, resizeCallback = () => {} }: IROOptions) {\n        // Parameters\n        this.$resizeElements = resizeElements;\n        this.resizeCallback = resizeCallback;\n\n        // Flags\n        this.isFirstObserve = true;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize Resize Observer.\n     *\n     * @private\n     */\n    private _init() {\n        // Callback\n        const onResize = (entries: ResizeObserverEntry[]) => {\n            !this.isFirstObserve && this.resizeCallback?.();\n            this.isFirstObserve = false;\n        };\n\n        // Instance\n        this.observer = new ResizeObserver(onResize);\n\n        // Observe each default elements\n        for (const $resizeElement of this.$resizeElements) {\n            this.observer.observe($resizeElement);\n        }\n    }\n\n    /**\n     * Lifecyle - Destroy Resize Observer.\n     */\n    public destroy() {\n        this.observer.disconnect();\n    }\n}\n","//@ts-ignore\nimport Lenis from 'lenis';\nimport Core from './core/Core';\nimport RO from './core/RO';\nimport {\n    ILenisScrollToOptions,\n    ILenisScrollValues,\n    ILocomotiveScrollOptions,\n    IModular,\n    lenisTargetScrollTo,\n} from './types';\nimport type { LenisOptions } from 'lenis';\n\n/**\n * @type {LenisOptions}\n */\nconst defaultLenisOptions: LenisOptions = {\n    wrapper: window,\n    content: document.documentElement,\n    wheelEventsTarget: window,\n    eventsTarget: window,\n    smoothWheel: true,\n    syncTouch: false,\n    syncTouchLerp: 0.075,\n    touchInertiaMultiplier: 35,\n    duration: 0.75,\n    easing: (t) => Math.min(1, 1.001 - Math.pow(2, -10 * t)), // https://www.desmos.com/calculator/brs54l4xou\n    lerp: 0.1,\n    infinite: false,\n    orientation: 'vertical',\n    gestureOrientation: 'vertical',\n    touchMultiplier: 1,\n    wheelMultiplier: 1,\n    autoResize: true\n};\n\n/**\n * Locomotive Scroll\n *\n * Detection of elements in viewport & smooth scrolling with parallax.\n *\n * Inspired by\n * {@link https://github.com/locomotivemtl/locomotive-scroll locomotive-scroll.js}\n * and built around\n * {@link https://github.com/darkroomengineering/lenis lenis.js}.\n */\n\nexport default class LocomotiveScroll {\n    public rafPlaying: boolean;\n\n    private lenisInstance: any;\n    private coreInstance: any;\n\n    private lenisOptions: LenisOptions;\n    private modularInstance?: IModular;\n    private triggerRootMargin?: string;\n    private rafRootMargin?: string;\n    private rafInstance?: any;\n    private autoResize?: boolean;\n    private autoStart?: boolean;\n    private ROInstance?: RO;\n    private scrollCallback?(scrollValues: ILenisScrollValues): void;\n    private initCustomTicker?: (render: () => void) => void;\n    private destroyCustomTicker?: (render: () => void) => void;\n    private _onRenderBind: () => void;\n    private _onResizeBind: () => void;\n    private _onScrollToBind: (event: MouseEvent) => void;\n\n    constructor({\n        lenisOptions = {},\n        modularInstance,\n        triggerRootMargin,\n        rafRootMargin,\n        autoResize = true,\n        autoStart = true,\n        scrollCallback = () => {},\n        initCustomTicker,\n        destroyCustomTicker,\n    }: ILocomotiveScrollOptions = {}) {\n        // Arguments\n        this.lenisOptions = { ...defaultLenisOptions, ...lenisOptions };\n\n        Object.assign(this, {\n            lenisOptions,\n            modularInstance,\n            triggerRootMargin,\n            rafRootMargin,\n            autoResize,\n            autoStart,\n            scrollCallback,\n            initCustomTicker,\n            destroyCustomTicker,\n        });\n\n        // Binding\n        this._onRenderBind = this._onRender.bind(this);\n        this._onScrollToBind = this._onScrollTo.bind(this);\n        this._onResizeBind = this._onResize.bind(this);\n\n        // Data\n        this.rafPlaying = false;\n\n        // Init\n        this._init();\n    }\n\n    /**\n     * Lifecyle - Initialize instance.\n     *\n     * @private\n     */\n    private _init(): void {\n        // Create Lenis instance\n        this.lenisInstance = new Lenis({\n            wrapper: this.lenisOptions.wrapper,\n            content: this.lenisOptions.content,\n            eventsTarget: this.lenisOptions.eventsTarget,\n            lerp: this.lenisOptions.lerp,\n            duration: this.lenisOptions.duration,\n            orientation: this.lenisOptions.orientation,\n            gestureOrientation: this.lenisOptions.gestureOrientation,\n            smoothWheel: this.lenisOptions.smoothWheel,\n            syncTouch: this.lenisOptions.syncTouch,\n            syncTouchLerp: this.lenisOptions.syncTouchLerp,\n            touchInertiaMultiplier: this.lenisOptions.touchInertiaMultiplier,\n            wheelMultiplier: this.lenisOptions.wheelMultiplier,\n            touchMultiplier: this.lenisOptions.touchMultiplier,\n            easing: this.lenisOptions.easing,\n        });\n        this.lenisInstance?.on('scroll', this.scrollCallback);\n\n        // Add scroll direction attribute on body\n        document.documentElement.setAttribute(\n            'data-scroll-orientation',\n            this.lenisInstance.options.orientation\n        );\n\n        requestAnimationFrame(() => {\n            // Create Core Instance\n            this.coreInstance = new Core({\n                $el: this.lenisInstance.rootElement,\n                modularInstance: this.modularInstance,\n                triggerRootMargin: this.triggerRootMargin,\n                rafRootMargin: this.rafRootMargin,\n                scrollOrientation: this.lenisInstance.options.orientation,\n            });\n\n            // Bind Events\n            this._bindEvents();\n\n            // RAF warning\n            if (this.initCustomTicker && !this.destroyCustomTicker) {\n                console.warn(\n                    'initCustomTicker callback is declared, but destroyCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            } else if (!this.initCustomTicker && this.destroyCustomTicker) {\n                console.warn(\n                    'destroyCustomTicker callback is declared, but initCustomTicker is not. Please pay attention. It could cause trouble.'\n                );\n            }\n\n            // Start RAF\n            this.autoStart && this.start();\n        });\n    }\n\n    /**\n     * Lifecyle - Destroy instance.\n     */\n    public destroy(): void {\n        // Stop raf\n        this.stop();\n        // Unbind Events\n        this._unbindEvents();\n        // Destroy Lenis\n        this.lenisInstance.destroy();\n        // Destroy Core\n        this.coreInstance?.destroy();\n\n        // Ensure a delay before destroying to handle cases of instant destruction\n        requestAnimationFrame(() => {\n            this.coreInstance?.destroy();\n        });\n    }\n\n    /**\n     * Events - Subscribe events to listen.\n     */\n    private _bindEvents() {\n        this._bindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance = new RO({\n                    resizeElements: [document.body],\n                    resizeCallback: this._onResizeBind,\n                });\n            } else {\n                (window as any).addEventListener('resize', this._onResizeBind);\n            }\n        }\n    }\n\n    /**\n     * Events - Unsubscribe listened events.\n     */\n    private _unbindEvents() {\n        this._unbindScrollToEvents();\n\n        if (this.autoResize) {\n            if ('ResizeObserver' in window) {\n                this.ROInstance && this.ROInstance.destroy();\n            } else {\n                (window as any).removeEventListener(\n                    'resize',\n                    this._onResizeBind\n                );\n            }\n        }\n    }\n\n    /**\n     * Events - Subscribe scrollTo events to listen.\n     */\n    private _bindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement): void => {\n                $el.addEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Events - Unsubscribe scrollTo listened events.\n     */\n    private _unbindScrollToEvents($container?: HTMLElement) {\n        const $rootContainer = $container\n            ? $container\n            : this.lenisInstance.rootElement;\n        const $scrollToElements =\n            $rootContainer?.querySelectorAll('[data-scroll-to]');\n        $scrollToElements?.length &&\n            $scrollToElements.forEach(($el: HTMLElement) => {\n                $el.removeEventListener('click', this._onScrollToBind, false);\n            });\n    }\n\n    /**\n     * Callback - Resize callback.\n     */\n    private _onResize() {\n        // Waiting the next frame to get the new current scroll value return by Lenis\n        requestAnimationFrame(() => {\n            this.coreInstance?.onResize({\n                currentScroll: this.lenisInstance.scroll,\n            });\n        });\n    }\n\n    /**\n     * Callback - Render callback.\n     */\n    private _onRender() {\n        this.lenisInstance?.raf(Date.now());\n\n        this.coreInstance?.onRender({\n            currentScroll: this.lenisInstance.scroll,\n            smooth: this.lenisInstance.isSmooth,\n        });\n    }\n\n    /**\n     * Callback - Scroll To callback.\n     */\n    private _onScrollTo(event: MouseEvent) {\n        event.preventDefault();\n        const $target = (event.currentTarget as HTMLElement) ?? null;\n        if (!$target) return;\n        const target =\n            $target.getAttribute('data-scroll-to-href') ||\n            $target.getAttribute('href');\n        const offset = $target.getAttribute('data-scroll-to-offset') || 0;\n        const duration =\n            $target.getAttribute('data-scroll-to-duration') ||\n            this.lenisOptions.duration ||\n            defaultLenisOptions.duration;\n\n        target &&\n            this.scrollTo(target, {\n                offset: typeof offset === 'string' ? parseInt(offset) : offset,\n                duration:\n                    typeof duration === 'string'\n                        ? parseInt(duration)\n                        : duration,\n            });\n    }\n\n    /**\n     * Start RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public start(): void {\n        if (this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis start method\n        this.lenisInstance?.start();\n\n        this.rafPlaying = true;\n        this.initCustomTicker\n            ? this.initCustomTicker(this._onRenderBind)\n            : this._raf();\n    }\n\n    /**\n     * Stop RequestAnimationFrame that active Lenis smooth and scroll progress.\n     */\n    public stop(): void {\n        if (!this.rafPlaying) {\n            return;\n        }\n\n        // Call lenis stop method\n        this.lenisInstance?.stop();\n\n        this.rafPlaying = false;\n        this.destroyCustomTicker\n            ? this.destroyCustomTicker(this._onRenderBind)\n            : this.rafInstance && cancelAnimationFrame(this.rafInstance);\n    }\n\n    /**\n     * Remove old scroll elements items and rebuild ScrollElements instances.\n     */\n    public removeScrollElements($oldContainer: HTMLElement): void {\n        if (!$oldContainer) {\n            console.error('Please provide a DOM Element as $oldContainer');\n            return;\n        }\n\n        this._unbindScrollToEvents($oldContainer);\n        this.coreInstance?.removeScrollElements($oldContainer);\n    }\n\n    /**\n     * Add new scroll elements items and rebuild ScrollElements instances.\n     */\n    public addScrollElements($newContainer: HTMLElement): void {\n        if (!$newContainer) {\n            console.error('Please provide a DOM Element as $newContainer');\n            return;\n        }\n\n        this.coreInstance?.addScrollElements($newContainer);\n        requestAnimationFrame(() => {\n            this._bindScrollToEvents($newContainer);\n        });\n    }\n\n    /**\n     * Trigger resize callback.\n     */\n    public resize(): void {\n        this._onResizeBind();\n    }\n\n    /**\n     * Trigger scroll to callback.\n     */\n    public scrollTo(\n        target: lenisTargetScrollTo,\n        options?: ILenisScrollToOptions\n    ): void {\n        this.lenisInstance?.scrollTo(target, {\n            offset: options?.offset,\n            lerp: options?.lerp,\n            duration: options?.duration,\n            immediate: options?.immediate,\n            lock: options?.lock,\n            force: options?.force,\n            easing: options?.easing,\n            onComplete: options?.onComplete,\n        });\n    }\n\n    /**\n     * RequestAnimationFrame that active Lenis smooth and scroll progress.\n     *\n     * @private\n     *\n     */\n    private _raf() {\n        this._onRenderBind();\n        this.rafInstance = requestAnimationFrame(() => this._raf());\n    }\n}\n"],"names":["IO","_ref","scrollElements","_ref$rootMargin","rootMargin","IORaf","this","observer","_init","_proto","prototype","_this","IntersectionObserver","entries","forEach","entry","$targetItem","find","item","$el","target","isIntersecting","isAlreadyIntersected","_setInview","_setOutOfView","_iterator","_step","_createForOfIteratorHelperLoose","done","observe","value","destroy","disconnect","$scrollElement","unobserve","scrollElement","setInteractivityOn","setInview","setInteractivityOff","setOutOfView","attributes","scrollRepeat","mapRange","inMin","inMax","outMin","outMax","closestNumber","array","reduce","prev","curr","Math","abs","ScrollElement","_this$$el$dataset$scr","_this$$el$dataset$scr2","_this$$el$dataset$scr3","_this$$el$dataset$scr4","_this$$el$dataset$scr5","id","modularInstance","subscribeElementUpdateFn","unsubscribeElementUpdateFn","needRaf","scrollOrientation","intersection","metrics","currentScroll","translateValue","progress","lastProgress","progressModularModules","isInview","isInteractive","isInFold","isFirstResize","scrollClass","dataset","scrollOffset","scrollPosition","scrollModuleProgress","scrollCssProgress","scrollEventProgress","scrollSpeed","parseFloat","scrollCall","scrollCallSelf","scrollIgnoreFold","scrollEnableTouchSpeed","start","end","offsetStart","offsetEnd","bcr","window","scrollY","scrollX","_getProgressModularModules","_resize","onResize","_ref2","onRender","_ref3","smooth","wSize","innerHeight","innerWidth","_computeProgress","isNaN","max","style","transform","classList","add","from","_getScrollCallFrom","_dispatchCall","remove","getBoundingClientRect","_computeMetrics","_computeIntersection","_this$metrics$bcr","metricsSize","height","width","top","left","offset","split","undefined","trim","scrollPositionStart","scrollPositionEnd","viewportStart","includes","parseInt","replace","viewportEnd","forcedProgress","_setCssProgress","_setCustomEventProgress","modularModules","call","moduleName","moduleId","currentProgress","setProperty","toString","customEventName","customEvent","CustomEvent","detail","dispatchEvent","modulesIdNames","Object","keys","filter","key","modules","length","_iterator2","_step2","_step3","_iterator3","module","push","moduleObj","closestIntersectionValue","way","_this$attributes$scro","_this$attributes","callParameters","callSelf","_targetModuleId","targetModuleId","func","ATTRIBUTES_THAT_NEED_RAF","Core","triggerRootMargin","rafRootMargin","$scrollContainer","triggeredScrollElements","RAFScrollElements","scrollElementsToUpdate","IOTriggerInstance","IORafInstance","console","error","$scrollElements","querySelectorAll","$scrollElementsArr","Array","_subscribeScrollElements","concat","_unsubscribeAllScrollElements","removeScrollElements","$oldContainer","$scrollElementsToRemove","index","indexOf","splice","targetScrollElementToUpdate","targetScrollElement","_unsubscribeElementUpdate","scrollElementItem","addScrollElements","$newContainer","ids","fromIndex","apply","toObserve","_checkRafNeeded","scrollElementInstance","_subscribeElementUpdate","bind","scrollElementToUpdate","attributesThatNeedRaf","removeAttribute","attributeToRemove","attribute","map","test","join","RO","resizeElements","_ref$resizeCallback","resizeCallback","$resizeElements","isFirstObserve","ResizeObserver","defaultLenisOptions","wrapper","content","document","documentElement","wheelEventsTarget","eventsTarget","smoothWheel","syncTouch","syncTouchLerp","touchInertiaMultiplier","duration","easing","t","min","pow","lerp","infinite","orientation","gestureOrientation","touchMultiplier","wheelMultiplier","autoResize","LocomotiveScroll","_temp","_ref$lenisOptions","lenisOptions","_ref$autoResize","_ref$autoStart","autoStart","_ref$scrollCallback","scrollCallback","initCustomTicker","destroyCustomTicker","rafPlaying","lenisInstance","coreInstance","rafInstance","ROInstance","_onRenderBind","_onResizeBind","_onScrollToBind","_extends","assign","_onRender","_onScrollTo","_onResize","_this$lenisInstance","Lenis","on","setAttribute","options","requestAnimationFrame","rootElement","_bindEvents","warn","_this$coreInstance","_this2","stop","_unbindEvents","_this2$coreInstance","_bindScrollToEvents","body","addEventListener","_unbindScrollToEvents","removeEventListener","$container","_this3","$rootContainer","$scrollToElements","_this4","_this5","_this5$coreInstance","scroll","_this$lenisInstance2","_this$coreInstance2","raf","Date","now","isSmooth","event","_event$currentTarget","preventDefault","$target","currentTarget","getAttribute","scrollTo","_this$lenisInstance3","_raf","_this$lenisInstance4","cancelAnimationFrame","_this$coreInstance3","_this$coreInstance4","_this6","resize","_this$lenisInstance5","immediate","lock","force","onComplete","_this7"],"mappings":"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"}